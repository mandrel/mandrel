name: Windows Mandrel-Quarkus tests

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'The human-friendly name of this workflow'
        default: "Windows Mandrel-Quarkus tests"
      quarkus-version:
        description: 'Quarkus version to test (branch, tag, commit, or "latest")'
        # "latest" is replaced by the latest release available in maven
        default: "main"
      quarkus-repo:
        description: 'The Quarkus repository to be used'
        default: 'quarkusio/quarkus'
      version:
        description: 'Mandrel version to test (branch, tag, or commit)'
        default: "graal/master"
      repo:
        description: 'The Mandrel/Graal repository to be used'
        default: 'graalvm/mandrel'
      distribution:
        description: 'Distribution to build, mandrel or graalvm'
        default: "mandrel"
      mandrel-packaging-version:
        description: 'Mandrel packaging version to test (branch, tag, or commit)'
        default: "master"
      build-from-source:
        description: 'Build Mandrel from source instead of grabing a release'
        default: "true"
      jdk:
        description: 'OpenJDK 11 to use, ga or ea (only needed when building from source)'
        default: "ga"
      # Builder image can't be tested on Windows due to https://github.com/actions/virtual-environments/issues/1143
      # builder-image:
      #   description: 'The builder image to use instead of a release or building from source (e.g. quay.io/quarkus/ubi-quarkus-mandrel:20.3-java11)'
      #   default: "null"

env:
  # Workaround testsuite locale issue
  LANG: en_US.UTF-8
  DB_USER: hibernate_orm_test
  DB_PASSWORD: hibernate_orm_test
  DB_NAME: hibernate_orm_test
  COMMON_MAVEN_ARGS: "-e -B --settings .github/mvn-settings.xml --fail-at-end"
  NATIVE_TEST_MAVEN_OPTS: "-Dtest-containers -Dstart-containers -DfailIfNoTests=false -Dquarkus.native.native-image-xmx=5g -Dnative -Dnative.surefire.skip -Dformat.skip -Dno-descriptor-tests -DskipDocs"
  MX_GIT_CACHE: refcache
  JAVA_HOME: ${{ github.workspace }}\openjdk
  MANDREL_REPO: ${{ github.workspace }}\mandrel
  MANDREL_HOME: ${{ github.workspace }}\..\mandrelvm
  MX_PATH: ${{ github.workspace }}\mx
  QUARKUS_PATH: ${{ github.workspace }}\quarkus
  MANDREL_PACKAGING_REPO: ${{ github.workspace }}\mandrel-packaging
  MAVEN_OPTS: -Xmx2g -XX:MaxMetaspaceSize=1g

jobs:
  name:
    name: ${{ github.event.inputs.name }}
    runs-on: ubuntu-latest
    steps:
      - run: true

  build-mandrel:
    name: Mandrel ${{ github.event.inputs.version }} build - OpenJDK11-${{ github.event.inputs.jdk }}
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
      if: github.event.inputs.build-from-source == 'true' && github.event.inputs.distribution == 'mandrel' #&& github.event.inputs.builder-image == 'null'
      with:
        repository: ${{ github.event.inputs.repo }}
        fetch-depth: 1
        ref: ${{ github.event.inputs.version }}
        path: ${{ env.MANDREL_REPO }}
    - uses: actions/checkout@v2
      if: github.event.inputs.build-from-source == 'true' && github.event.inputs.distribution == 'mandrel' #&& github.event.inputs.builder-image == 'null'
      with:
        repository: graalvm/mx.git
        ref: master
        path: ${{ env.MX_PATH }}
    - uses: actions/checkout@v2
      if: github.event.inputs.build-from-source == 'true' && github.event.inputs.distribution == 'mandrel' #&& github.event.inputs.builder-image == 'null'
      with:
        repository: graalvm/mandrel-packaging
        ref: ${{ github.event.inputs.mandrel-packaging-version }}
        path: ${{ env.MANDREL_PACKAGING_REPO }}
    - uses: actions/cache@v2.1.5
      if: github.event.inputs.build-from-source == 'true' && github.event.inputs.distribution == 'mandrel' #&& github.event.inputs.builder-image == 'null'
      with:
        path: ~/.mx
        key: ${{ runner.os }}-mx-${{ hashFiles('**/suite.py') }}
        restore-keys: ${{ runner.os }}-mx-
    - name: Get OpenJDK 11 with static libs
      if: github.event.inputs.build-from-source == 'true' && github.event.inputs.distribution == 'mandrel' #&& github.event.inputs.builder-image == 'null'
      run: |
        $files = @{
            "https://api.adoptopenjdk.net/v3/binary/latest/11/${{ github.event.inputs.jdk }}/windows/x64/jdk/hotspot/normal/openjdk" = "jdk.zip"
            "https://api.adoptopenjdk.net/v3/binary/latest/11/${{ github.event.inputs.jdk }}/windows/x64/staticlibs/hotspot/normal/openjdk" = "jdk-static-libs.zip"
        }
        $wc = New-Object System.Net.WebClient
        foreach ($h in $files.GetEnumerator()) {
            Write-Host "Processing $($h.Name) -> $($h.Value)"
            $wc.DownloadFile($($h.Name), "$Env:temp\$($h.Value)")
            Expand-Archive "$Env:temp\$($h.Value)" -DestinationPath "$Env:temp"
        }
        Move-Item -Path "$Env:temp\openjdk*" -Destination $Env:JAVA_HOME
        & $Env:JAVA_HOME\bin\java -version
    - name: Build Mandrel
      if: github.event.inputs.build-from-source == 'true' && github.event.inputs.distribution == 'mandrel' #&& github.event.inputs.builder-image == 'null'
      run: |
        cmd.exe /c "call `"C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat`" && set > %temp%\vcvars64.txt"
        Get-Content "$Env:temp\vcvars64.txt" | Foreach-Object {
          if ($_ -match "^(.*?)=(.*)$") {
            Set-Content "Env:\$($matches[1])" $matches[2]
          }
        }
        & $Env:JAVA_HOME\bin\java -ea $Env:MANDREL_PACKAGING_REPO\build.java `
          --mx-home $Env:MX_PATH `
          --mandrel-repo $Env:MANDREL_REPO `
          --mandrel-home $Env:MANDREL_HOME
        & $Env:MANDREL_HOME\bin\native-image --version
        Remove-Item -Recurse $Env:JAVA_HOME
        Move-Item -Path $Env:MANDREL_HOME -Destination $Env:JAVA_HOME
    - name: Archive JDK
      if: github.event.inputs.build-from-source == 'true' && github.event.inputs.distribution == 'mandrel' #&& github.event.inputs.builder-image == 'null'
      shell: bash
      run: tar czvf jdk.tgz -C $(dirname ${JAVA_HOME}) $(basename ${JAVA_HOME})
    - name: Persist Mandrel build
      if: github.event.inputs.build-from-source == 'true' && github.event.inputs.distribution == 'mandrel' #&& github.event.inputs.builder-image == 'null'
      uses: actions/upload-artifact@v2
      with:
        name: jdk
        path: jdk.tgz

  build-graal:
    name: GraalVM CE ${{ github.event.inputs.version }} build
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
      if: github.event.inputs.build-from-source == 'true' && github.event.inputs.distribution == 'graalvm' #&& github.event.inputs.builder-image == 'null'
      with:
        repository: ${{ github.event.inputs.repo }}
        fetch-depth: 1
        ref: ${{ github.event.inputs.version }}
        path: graal
    - uses: actions/checkout@v2
      if: github.event.inputs.build-from-source == 'true' && github.event.inputs.distribution == 'graalvm' #&& github.event.inputs.builder-image == 'null'
      with:
        repository: graalvm/mx.git
        ref: master
        path: ${{ env.MX_PATH }}
    - uses: actions/cache@v2.1.5
      if: github.event.inputs.build-from-source == 'true' && github.event.inputs.distribution == 'graalvm' #&& github.event.inputs.builder-image == 'null'
      with:
        path: ~/.mx
        key: ${{ runner.os }}-mx-${{ hashFiles('**/suite.py') }}
        restore-keys: ${{ runner.os }}-mx-
    - name: Build graalvm native-image
      if: github.event.inputs.build-from-source == 'true' && github.event.inputs.distribution == 'graalvm' #&& github.event.inputs.builder-image == 'null'
      run: |
        cmd.exe /c "call `"C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat`" && set > %temp%\vcvars64.txt"
        Get-Content "$Env:temp\vcvars64.txt" | Foreach-Object {
          if ($_ -match "^(.*?)=(.*)$") {
            Set-Content "Env:\$($matches[1])" $matches[2]
          }
        }
        Set-Location graal\substratevm
        mkdir -p "$Env:temp\jdk-dl"
        & $Env:MX_PATH\mx.cmd --java-home "$Env:JAVA_HOME_11_X64" fetch-jdk --java-distribution labsjdk-ce-11 --to "$Env:temp\jdk-dl" --alias $Env:JAVA_HOME
        & $Env:JAVA_HOME\bin\java --version
        & $Env:MX_PATH\mx.cmd --native=native-image --components='Native Image' build
        ${graalvm-home} = @(& $Env:MX_PATH\mx.cmd --native=native-image --components='Native Image' graalvm-home)
        rm -Recurse -Force $Env:JAVA_HOME
        mv ${graalvm-home} $Env:JAVA_HOME
        & $Env:JAVA_HOME\bin\native-image --version
    - name: Archive JDK
      if: github.event.inputs.build-from-source == 'true' && github.event.inputs.distribution == 'graalvm' #&& github.event.inputs.builder-image == 'null'
      shell: bash
      run: tar czvf jdk.tgz -C $(dirname ${JAVA_HOME}) $(basename ${JAVA_HOME})
    - name: Persist GraalVM CE build
      if: github.event.inputs.build-from-source == 'true' && github.event.inputs.distribution == 'graalvm' #&& github.event.inputs.builder-image == 'null'
      uses: actions/upload-artifact@v2
      with:
        name: jdk
        path: jdk.tgz

  get-jdk:
    name: Get Mandrel/GraalVM CE ${{ github.event.inputs.version }} #or OpenJDK11-${{ github.event.inputs.jdk }}
    runs-on: windows-latest
    steps:
    - name: Get Mandrel ${{ github.event.inputs.version }}
      if: github.event.inputs.build-from-source == 'false' && github.event.inputs.distribution == 'mandrel' #&& github.event.inputs.builder-image == 'null'
      run: |
        $VERSION="${{ github.event.inputs.version }}"
        $VERSION_SHORT=@($VERSION -replace 'mandrel-')
        $wc = New-Object System.Net.WebClient
        $url="$Env:GITHUB_SERVER_URL/graalvm/mandrel/releases/download/${VERSION}/mandrel-java11-windows-amd64-${VERSION_SHORT}.zip"
        $wc.DownloadFile($($url), "mandrel.zip")
        Expand-Archive "mandrel.zip" -DestinationPath "$Env:temp"
        Move-Item -Path "$Env:temp\mandrel-*" -Destination $Env:JAVA_HOME
        & $Env:JAVA_HOME\bin\native-image --version
    - name: Get GraalVM CE ${{ github.event.inputs.version }}
      if: github.event.inputs.build-from-source == 'false' && github.event.inputs.distribution == 'graalvm' #&& github.event.inputs.builder-image == 'null'
      run: |
        $VERSION="${{ github.event.inputs.version }}"
        $VERSION_SHORT=@($VERSION -replace 'vm-')
        $wc = New-Object System.Net.WebClient
        $url="$Env:GITHUB_SERVER_URL/graalvm/graalvm-ce-builds/releases/download/${VERSION}/graalvm-ce-java11-windows-amd64-${VERSION_SHORT}.zip"
        $wc.DownloadFile($($url), "graalvm.zip")
        Expand-Archive "graalvm.zip" -DestinationPath "$Env:temp"
        Move-Item -Path "$Env:temp\graalvm-*" -Destination $Env:JAVA_HOME
        & $Env:JAVA_HOME\bin\gu install native-image
        & $Env:JAVA_HOME\bin\native-image --version
    # - name: Get OpenJDK11-${{ github.event.inputs.jdk }}
    #   if: github.event.inputs.builder-image != 'null'
    #   run: |
    #     $wc = New-Object System.Net.WebClient
    #     $url="https://api.adoptopenjdk.net/v3/binary/latest/11/${{ github.event.inputs.jdk }}/windows/x64/jdk/hotspot/normal/openjdk"
    #     $wc.DownloadFile($($url), "jdk.zip")
    #     Expand-Archive "jdk.zip" -DestinationPath "$Env:temp"
    #     Move-Item -Path "$Env:temp\openjdk*" -Destination $Env:JAVA_HOME
    #     & $Env:JAVA_HOME\bin\java -version
    - name: Archive JDK
      if: github.event.inputs.build-from-source == 'false' #|| github.event.inputs.builder-image != 'null'
      shell: bash
      run: tar czvf jdk.tgz -C $(dirname ${JAVA_HOME}) $(basename ${JAVA_HOME})
    - name: Persist Mandrel/GraalVM or OpenJDK
      if: github.event.inputs.build-from-source == 'false' #|| github.event.inputs.builder-image != 'null'
      uses: actions/upload-artifact@v2
      with:
        name: jdk
        path: jdk.tgz

  get-test-matrix:
    name: Get test matrix
    runs-on: ubuntu-latest
    outputs:
      quarkus-version: ${{ steps.version.outputs.quarkus-version }}
      tests-matrix: ${{ steps.version.outputs.tests-matrix }}
    steps:
    - name: Get Quarkus version and test matrix
      id: version
      run: |
        if [ ${{ github.event.inputs.quarkus-version }} == "latest" ]
        then
          export QUARKUS_VERSION=$(curl https://repo1.maven.org/maven2/io/quarkus/quarkus-bom/maven-metadata.xml | awk -F"[<>]" '/latest/ {print $3}')
        else
          export QUARKUS_VERSION=$(git ls-remote ${GITHUB_SERVER_URL}/${{ github.event.inputs.quarkus-repo }} | grep ${{ github.event.inputs.quarkus-version }} | cut -f 1)
        fi
        if [ "$QUARKUS_VERSION" == "" ]
        then
          export QUARKUS_VERSION=${{ github.event.inputs.quarkus-version }}
        fi
        echo ${QUARKUS_VERSION}
        echo "::set-output name=quarkus-version::${QUARKUS_VERSION}"
        curl --output native-tests.json https://raw.githubusercontent.com/${{ github.event.inputs.quarkus-repo }}/${QUARKUS_VERSION}/.github/native-tests.json
        tests_json=$(tr -d '\n' < native-tests.json)
        echo ${tests_json}
        echo "::set-output name=tests-matrix::${tests_json}"

  build-quarkus:
    name: Quarkus ${{ github.event.inputs.quarkus-version }} - OpenJDK11-${{ github.event.inputs.jdk }}
    runs-on: ubuntu-latest
    needs:
      - get-test-matrix
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v2
      with:
        repository: ${{ github.event.inputs.quarkus-repo }}
        fetch-depth: 1
        ref: ${{ needs.get-test-matrix.outputs.quarkus-version }}
        path: quarkus
    - uses: actions/cache@v2.1.5
      with:
        path: ~/.m2/repository
        key: base-windows-${{ needs.get-test-matrix.outputs.quarkus-version }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: base-windows-${{ needs.get-test-matrix.outputs.quarkus-version }}-maven-
    - name: Build quarkus
      run: |
        curl -L https://api.adoptopenjdk.net/v3/binary/latest/11/ga/linux/x64/jdk/hotspot/normal/openjdk -o jdk.tar.gz
        export JAVA_HOME=$(pwd)/openjdk
        echo ${JAVA_HOME}
        mkdir -p ${JAVA_HOME}
        tar xf jdk.tar.gz -C ${JAVA_HOME} --strip-components=1
        ${JAVA_HOME}/bin/java -version
        cd quarkus
        ./mvnw ${COMMON_MAVEN_ARGS} -Dquickly
    - name: Tar Maven Repo
      shell: bash
      run: tar -I 'pigz -9' -cf maven-repo-${{ needs.get-test-matrix.outputs.quarkus-version }}-${{ github.event.inputs.jdk }}.tgz -C ~ .m2/repository
    - name: Persist Maven Repo
      uses: actions/upload-artifact@v2
      with:
        name: maven-repo-${{ needs.get-test-matrix.outputs.quarkus-version }}-${{ github.event.inputs.jdk }}
        path: maven-repo-${{ needs.get-test-matrix.outputs.quarkus-version }}-${{ github.event.inputs.jdk }}.tgz
    - name: Delete Local Artifacts From Cache
      shell: bash
      run: rm -r ~/.m2/repository/io/quarkus

  native-tests:
    name: Q ${{ github.event.inputs.quarkus-version }} - ${{ matrix.category }} - OpenJDK11-${{ github.event.inputs.jdk }}
    needs:
      - build-quarkus
      - build-mandrel
      - build-graal
      - get-jdk
      - get-test-matrix
    runs-on: windows-latest
    # Ignore the following YAML Schema error
    timeout-minutes: ${{matrix.timeout}}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.get-test-matrix.outputs.tests-matrix) }}
    steps:
      - name: Download Maven Repo
        if: startsWith(matrix.os-name, 'windows')
        uses: actions/download-artifact@v1
        with:
          name: maven-repo-${{ needs.get-test-matrix.outputs.quarkus-version }}-${{ github.event.inputs.jdk }}
          path: .
      - name: Extract Maven Repo
        if: startsWith(matrix.os-name, 'windows')
        shell: bash
        run: tar -xzf maven-repo-${{ needs.get-test-matrix.outputs.quarkus-version }}-${{ github.event.inputs.jdk }}.tgz -C ~
      - uses: actions/checkout@v2
        if: startsWith(matrix.os-name, 'windows')
        with:
          repository: ${{ github.event.inputs.quarkus-repo }}
          fetch-depth: 1
          ref: ${{ needs.get-test-matrix.outputs.quarkus-version }}
          path: ${{ env.QUARKUS_PATH }}
      - uses: actions/cache@v2.1.5
        if: startsWith(matrix.os-name, 'windows')
        with:
          path: ~/.m2/repository
          key: base-windows-${{ needs.get-test-matrix.outputs.quarkus-version }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: base-windows-${{ needs.get-test-matrix.outputs.quarkus-version }}-maven-
      - name: Download Mandrel or OpenJDK11
        if: startsWith(matrix.os-name, 'windows')
        uses: actions/download-artifact@v1
        with:
          name: jdk
          path: .
      - name: Extract JDK
        if: startsWith(matrix.os-name, 'windows')
        shell: bash
        run: |
          mkdir -p "${JAVA_HOME}"
          tar -xzvf jdk.tgz -C openjdk --strip-components=1
          ${JAVA_HOME}/bin/java -version
      # - name: Reclaim disk space
      #   shell: bash
      #   run: ${QUARKUS_PATH}/.github/ci-prerequisites.sh
      # We do this so we can get better analytics for the downloaded version of the build images
      - name: Update Docker Client User Agent
        if: startsWith(matrix.os-name, 'windows')
        shell: bash
        run: |
          cat <<< $(jq '.HttpHeaders += {"User-Agent": "Mandrel-CI-Docker-Client"}' ~/.docker/config.json) > ~/.docker/config.json
      - name: Build with Maven
        if: startsWith(matrix.os-name, 'windows')
        env:
          TEST_MODULES: ${{matrix.test-modules}}
          CATEGORY: ${{matrix.category}}
        run: |
          cmd.exe /c "call `"C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat`" && set > %temp%\vcvars64.txt"
          Get-Content "$Env:temp\vcvars64.txt" | Foreach-Object {
            if ($_ -match "^(.*?)=(.*)$") {
              Set-Content "Env:\$($matches[1])" $matches[2]
            }
          }
          cd $Env:QUARKUS_PATH
          $Env:GRAALVM_HOME="$Env:JAVA_HOME"
          Write-Host "$Env:GRAALVM_HOME"
          if (Test-Path "$Env:GRAALVM_HOME/bin/native-image" -PathType leaf) {
            & "$Env:GRAALVM_HOME/bin/native-image" --version
          }
          $opts=@()
          -split $Env:NATIVE_TEST_MAVEN_OPTS | foreach { $opts += "`"$_`"" }
          #if ( "${{ github.event.inputs.builder-image }}" -eq "null" ) {
          mvn -f integration-tests -pl "$Env:TEST_MODULES" $opts install
          #} else {
          #  mvn -pl $do_modules "-Dquarkus.native.container-build=true" "-Dquarkus.native.builder-image=${{ github.event.inputs.builder-image }}" $opts package
          #}
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -type d -name '*-reports' -o -wholename '*/build/reports/tests/functionalTest' | tar czvf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: test-reports-native-${{matrix.category}}
          path: 'test-reports.tgz'

  mandrel-integration-tests:
    name: Q Mandrel IT
    needs:
      - build-quarkus
      - get-test-matrix
    runs-on: windows-latest
    env:
      # leave more space for the actual native compilation and execution
      MAVEN_OPTS: -Xmx1g
    timeout-minutes: 40
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
        with:
          repository: Karm/mandrel-integration-tests
          fetch-depth: 1
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo-${{ needs.get-test-matrix.outputs.quarkus-version }}-${{ github.event.inputs.jdk }}
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo-${{ needs.get-test-matrix.outputs.quarkus-version }}-${{ github.event.inputs.jdk }}.tgz -C ~
      - name: Download Mandrel or OpenJDK11
        uses: actions/download-artifact@v1
        with:
          name: jdk
          path: .
      - name: Extract JDK
        shell: bash
        run: |
          mkdir -p "${JAVA_HOME}"
          tar -xzvf jdk.tgz -C openjdk --strip-components=1
          ${JAVA_HOME}/bin/java -version
      - name: Update Docker Client User Agent
        shell: bash
        run: |
          cat <<< $(jq '.HttpHeaders += {"User-Agent": "Mandrel-CI-Docker-Client"}' ~/.docker/config.json) > ~/.docker/config.json
      - name: Build with Maven
        run: |
          cmd.exe /c "call `"C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat`" && set > %temp%\vcvars64.txt"
          Get-Content "$Env:temp\vcvars64.txt" | Foreach-Object {
            if ($_ -match "^(.*?)=(.*)$") {
              Set-Content "Env:\$($matches[1])" $matches[2]
            }
          }
          $Env:GRAALVM_HOME="$Env:JAVA_HOME"
          $Env:PATH="$Env:JAVA_HOME\bin;$Env:PATH"
          if (Test-Path "$Env:GRAALVM_HOME\bin\native-image.cmd" -PathType leaf) {
            & "$Env:GRAALVM_HOME\bin\native-image" --version
          } else {
            Write-Host "Cannot find native-image tool. Quitting..."
            exit 1
          }
          $QUARKUS_VERSION=${{ github.event.inputs.quarkus-version }}
          if (! ($QUARKUS_VERSION -match "^.*\.(Final|CR|Alpha|Beta)[0-9]?$")) {
            $QUARKUS_VERSION="999-SNAPSHOT"
          }
          Write-Host "$QUARKUS_VERSION"
          mvn clean verify "-Dquarkus.native.native-image-xmx=5g" "-Dquarkus.version=$QUARKUS_VERSION" -Ptestsuite
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: tar czvf test-reports-mandrel-it.tgz ./testsuite/target/archived-logs/
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: test-reports-mandrel-it-${{matrix.category}}
          path: 'test-reports-mandrel-it.tgz'
